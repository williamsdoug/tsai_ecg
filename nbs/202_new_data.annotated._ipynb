{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# default_exp data.annotated2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#! pip install -Uqq git+https://github.com/timeseriesAI/tsai.git"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Annotated Timeseries\n",
    "> Functions and classes to support timeseries containing annotated positions, where an individual annotation denotes a region of interest within a waveform with an associated reference point.  Labels may be uniquely specified per-annotation instance, or may be common among all annotations withing the timeseries\n",
    "\n",
    "\n",
    "**Motivation**: Electrocardiogram data (ECG/EKG) may contain additional metadata denoting the position of individual heartbeats (qrs position) that can be used to analyze the morphology of individual beats (p-wave, qrs-complex, t-wave) for certain cardiac abnormalities.  Other biosignals such as cardiotocogram (CTG) may also benefit from the analysis of individual events (e.g.: fetal hr decelerations, fetal hr accelerations) with the overall signal.\n",
    "\n",
    "**Modes of Operation**:\n",
    "\n",
    "- static:  Preprocess timeseries to extract subsequences where subsequence is defined by offset and with relative to each annotated position (or random subset of annotated positions).  \n",
    "\n",
    "- dynamic: Batch transform extracts subsequences and associated label for a randomly selected annotation. \n",
    "\n",
    "  - **Note:** These classes and functionals are conceptually similar to TSUnwindowedDataset / TSUnwindowedDataset with the key difference that window locatiosn are explicitly specified using a set of annotated positions and that6 each window may have a unique label\n",
    "\n",
    "\n",
    "Limitations:\n",
    "\n",
    "- Non-uniform X arrays (ragged numpy arrays) are only supported in static / preprocessing mode."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# hide\n",
    "from nbdev import show_doc"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "import tsai\n",
    "from tsai.all import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "from tsai.imports import *\n",
    "from tsai.utils import *\n",
    "from tsai.data.external import *\n",
    "from tsai.data.core import *\n",
    "from tsai.data.preprocessing import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "from tsai_ecg.data.synthetic import get_synthetic_sin_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Annotation Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#exporti\n",
    "def _sliding_annotations(all_ann, lengths, width=100, offset=None, limit=None, include_empty=False):\n",
    "    lengths = [lengths]*len(all_ann) if isinstance(lengths, int) else lengths   # lengths for each row\n",
    "    offset = offset if offset else -width//2\n",
    "    offsetR = width + offset\n",
    "    for i, row_anns in enumerate(all_ann):\n",
    "        row_anns =  [(idx, e) for idx, e in enumerate(row_anns) \n",
    "                     if e+offset >=0 and e+offsetR <  lengths[i]]  # trim overlap\n",
    "        if len(row_anns) > 0:\n",
    "            if limit and len(row_anns) > limit:\n",
    "                random.shuffle(row_anns)\n",
    "                row_anns = row_anns[:limit]\n",
    "            for i_a, pos in row_anns:\n",
    "                yield i, pos+offset, pos+offsetR, i_a\n",
    "        elif include_empty:\n",
    "            pos = random.randint(lengths[i]-width)\n",
    "            yield i, pos, pos+width, None\n",
    "        else:\n",
    "            continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#exporti\n",
    "def _compute_new_splits(m, orig_splits):\n",
    "    return L( L(i for i, old_i in enumerate(m) if old_i in split_set)  \n",
    "              for split_set in orig_splits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#exporti\n",
    "def _compute_new_folds(m, orig_folds):\n",
    "    return orig_folds[m]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "@delegates(_sliding_annotations)\n",
    "def preprocess_extract_annotation_windows(X, anns, y=None, splits=None, folds=None, \n",
    "                                          per_ann_label=False, verbose=False, **kwargs):\n",
    "    \"\"\"Extracted timeseries subsequences and optionally label relative to annotated positions\"\"\"\n",
    "    lengths = [x.shape[-1] for x in X]\n",
    "    \n",
    "    if isinstance(y, NoneType):\n",
    "        if verbose: print('No Label')\n",
    "        X_win, m = zip(*[[X[i_orig][..., idx_l:idx_r], i_orig]\n",
    "            for (i_orig, idx_l, idx_r, _) in _sliding_annotations(anns, lengths, **kwargs)])\n",
    "        y_win = None\n",
    "    elif per_ann_label:\n",
    "        if verbose: print('label per annotation')\n",
    "        X_win, y_win, m = zip(*[[X[i_orig][..., idx_l:idx_r], y[i_orig][i_a], i_orig]\n",
    "            for (i_orig, idx_l, idx_r, i_a) in _sliding_annotations(anns, lengths, **kwargs)])\n",
    "        y_win = L(*y_win)\n",
    "    elif isinstance(y[0], np.ndarray):\n",
    "        if verbose: print('label is vector')\n",
    "        assert y[0].shape[-1] == X[0].shape[-1]\n",
    "        X_win, y_win, m = zip(*[[X[i_orig][..., idx_l:idx_r], y[i_orig][idx_l:idx_r], i_orig]\n",
    "            for (i_orig, idx_l, idx_r, _) in _sliding_annotations(anns, lengths, **kwargs)])\n",
    "        y_win = np.array(y_win)\n",
    "    else:\n",
    "        if verbose: print('label per row')\n",
    "        X_win, y_win, m = zip(*[[X[i_orig][..., idx_l:idx_r], y[i_orig], i_orig]\n",
    "            for (i_orig, idx_l, idx_r, _) in _sliding_annotations(anns, lengths, **kwargs)])\n",
    "        y_win = L(*y_win)\n",
    "\n",
    "    ret = [np.array(X_win)]\n",
    "    if not isinstance(y_win, NoneType):\n",
    "        ret.append(y_win)\n",
    "    \n",
    "    if not isinstance(splits, NoneType):\n",
    "        return [*ret, _compute_new_splits(m, splits)]\n",
    "    elif not isinstance(folds, NoneType):\n",
    "        return [*ret, _compute_new_folds(m, folds)]\n",
    "    elif len(ret) == 1:\n",
    "        return ret[0]\n",
    "    else:\n",
    "        return ret"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "````\n",
    "Inputs:\n",
    "      X:       Timeseries data, can be uniform or ragged, with or without channels \n",
    "      ans:     List of annotation positions for each waveform  \n",
    "      y:       optional list label data (nested for per-event lavels)\n",
    "      width:   window size in samples\n",
    "      offset:  start of window vs event, window centered by default\n",
    "      limit:   max windows per timeseries\n",
    "      per_ann_label:  returns label data corresponding to specific event\n",
    "      include_empty: include randomly selected window if no annotated positions\n",
    "      splits:  splits data, will be mapped to windows data if present\n",
    "      folds:   folds data, will be mapped to windows data if present\n",
    "      *note: splits and folds are mutually exclusive\n",
    "Returns:\n",
    "      X_win:   windowed subsequences (an input row may produce multiple output rows)\n",
    "      y_win:   labels for subsequences\n",
    "      folds_win or folds_win: Optional, depending on if splits or folds specified\n",
    "````"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: Uniform length timeseries, with channels - Extract subsequences only "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:(2, 1, 1000)  y:2  anns:2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_win:(10, 1, 150)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=2, dims=3)\n",
    "print(f'X:{X.shape}  y:{len(y)}  anns:{len(anns)}')\n",
    "\n",
    "for i, sig in enumerate(X):\n",
    "    plt.figure(figsize=(8, 0.75))\n",
    "    plt.title(f'Input:{i} -- {sig.shape}')\n",
    "    plt.plot(np.arange(sig.shape[-1]), sig[0])\n",
    "    plt.scatter(anns[i], sig[0][anns[i]], c='r', s=10)\n",
    "    plt.xlim(0, sig.shape[-1])\n",
    "    plt.show()\n",
    "\n",
    "X_win = preprocess_extract_annotation_windows(X, anns, width=150, limit=5)\n",
    "print(f'X_win:{X_win.shape}')\n",
    "for i in [1, 5]:\n",
    "    sig = X_win[i]\n",
    "    plt.figure(figsize=(4, 0.75))\n",
    "    plt.title(f'Output:{i} - shape:{sig.shape}')\n",
    "    plt.plot(np.arange(sig.shape[-1]), sig[0])\n",
    "    plt.xlim(0, sig.shape[-1])\n",
    "    plt.show()  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extract subsequences and per-row labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_win:(15, 150)  y_win:15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3)\n",
    "\n",
    "w=150\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=w, limit=5)\n",
    "test_eq(isinstance(X_win, np.ndarray), True)\n",
    "test_eq(len(X_win.shape), len(X.shape))  # verify dimensions\n",
    "test_eq(X_win.shape[-1], w)              # verify width\n",
    "test_eq(len(X_win), len(y_win))  \n",
    "print(f'X_win:{X_win.shape}  y_win:{len(y_win)}')\n",
    "\n",
    "for i in range(0, len(X_win), 4):\n",
    "    sig = X_win[i]\n",
    "    plt.figure(figsize=(4, 0.75))\n",
    "    plt.title(f'{i} - label:{y_win[i]}  shape:{sig.shape}')\n",
    "    plt.plot(np.arange(len(sig)), sig)\n",
    "    plt.xlim(0, len(sig))\n",
    "    plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: per-annotation labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X:(3, 1000)  y:3  anns:3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_win:(15, 150)  y_win:15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, per_ann_label=True)\n",
    "print(f'X:{X.shape}  y:{len(y)}  anns:{len(anns)}')\n",
    "\n",
    "i, sig = 0, X[0]\n",
    "plt.figure(figsize=(8, 0.75))\n",
    "plt.title(f'Input:{i} -  {sig.shape}')\n",
    "plt.plot(np.arange(len(sig)), sig)\n",
    "anns_p = [e for j, e in enumerate(anns[i]) if y[i][j] == 'p']\n",
    "plt.scatter(anns_p, sig[anns_p], c='r', s=10)\n",
    "anns_n = [e for j, e in enumerate(anns[i]) if y[i][j] == 'n']\n",
    "plt.scatter(anns_n, sig[anns_n], c='k', s=10)\n",
    "plt.xlim(0, len(sig))\n",
    "plt.show()\n",
    "\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=150, \n",
    "                                                     per_ann_label=True, limit=5)\n",
    "print(f'X_win:{X_win.shape}  y_win:{len(y_win)}')\n",
    "for i in range(3):\n",
    "    sig = X_win[i]\n",
    "    plt.figure(figsize=(4, 0.75))\n",
    "    plt.title(f'Output:{i} - label: {y_win[i]}  shape: {sig.shape}')\n",
    "    plt.plot(np.arange(len(sig)), sig)\n",
    "    plt.xlim(0, len(sig))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: vector/array labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_win:(15, 300)  y_win:15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x54 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, label_is_array=True)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "print(f'X_win:{X_win.shape}  y_win:{len(y_win)}')\n",
    "for i in range(0, len(X_win), 4):\n",
    "    sig = X_win[i]\n",
    "    yy =  y_win[i]\n",
    "    yy_pos = np.where(yy!=0)[0]\n",
    "    yy_subset =  yy[yy!=0]\n",
    "    plt.figure(figsize=(8, 0.75))\n",
    "    plt.title(f'{i}: non-zero labels: {yy_subset} @ {yy_pos}')\n",
    "    plt.plot(np.arange(len(sig)), sig)\n",
    "    plt.xlim(0, len(sig))\n",
    "    plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: Splits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(#2) [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39],[14, 15, 16, 17, 20, 21, 36, 37]]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2-way split: train, valid\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=20, split_pct=0.2)\n",
    "X_win, y_win, splits_win = preprocess_extract_annotation_windows(X, anns, y=y, width=150, limit=2, splits=splits)\n",
    "test_eq(len(splits_win), len(splits))\n",
    "splits_win"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(#3) [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 24, 25, 28, 29, 30, 31, 32, 33, 38, 39],[10, 11, 12, 13, 18, 19, 36, 37],[20, 21, 22, 23, 26, 27, 34, 35]]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3-way split: train, valid, test\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=20, split_pct=(0.2, 0.15))\n",
    "X_win, y_win, splits_win = preprocess_extract_annotation_windows(X, anns, y=y, width=150, limit=2, splits=splits)\n",
    "test_eq(len(splits_win), len(splits))\n",
    "splits_win"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: Folds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(#40) [4,4,3,3,0,0,2,2,2,2...]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y, anns, folds = get_synthetic_sin_data(length=1000, n_sig=20, n_fold=5)\n",
    "X_win, y_win, folds_win = preprocess_extract_annotation_windows(X, anns, y=y, width=150, limit=2, folds=folds)\n",
    "test_eq(set(folds), set(folds_win))\n",
    "folds_win"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "\n",
    "# Unit tests\n",
    "\n",
    "# Verify lengths of X-array\n",
    "\n",
    "n_sig, w, dims = 3, 150, 2\n",
    "\n",
    "# uniform no-channel\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=n_sig, dims=dims)\n",
    "X_win = preprocess_extract_annotation_windows(X, anns, width=w, limit=5)\n",
    "test_eq(isinstance(X_win, np.ndarray), True)\n",
    "test_eq(len(X_win.shape), len(X.shape))  # verify dimensions\n",
    "test_eq(X_win.shape[-1], w)              # verify width\n",
    "if dims == 3: test_eq(X_win.shape[-2], 1)\n",
    "    \n",
    "# non-uniform no-channel   \n",
    "X, y, anns = get_synthetic_sin_data(length=(1000, 1100), n_sig=n_sig, dims=dims)\n",
    "X_win = preprocess_extract_annotation_windows(X, anns, width=w, limit=5)\n",
    "test_eq(isinstance(X_win, np.ndarray), True)\n",
    "test_eq(len(X_win[0].shape), len(X[0].shape))  # verify dimensions\n",
    "test_eq(X_win.shape[-1], w)              # verify width\n",
    "if dims == 3: test_eq(X_win.shape[-2], 1)\n",
    "\n",
    "n_sig, w, dims = 3, 150, 3\n",
    "\n",
    "# uniform with channel\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=n_sig, dims=dims)\n",
    "X_win = preprocess_extract_annotation_windows(X, anns, width=w, limit=5)\n",
    "test_eq(isinstance(X_win, np.ndarray), True)\n",
    "test_eq(len(X_win.shape), len(X.shape))  # verify dimensions\n",
    "test_eq(X_win.shape[-1], w)              # verify width\n",
    "if dims == 3: test_eq(X_win.shape[-2], 1)\n",
    "    \n",
    "# non-uniform with channel   \n",
    "X, y, anns = get_synthetic_sin_data(length=(1000, 1100), n_sig=n_sig, dims=dims)\n",
    "X_win = preprocess_extract_annotation_windows(X, anns, width=w, limit=5)\n",
    "test_eq(isinstance(X_win, np.ndarray), True)\n",
    "test_eq(len(X_win[0].shape), len(X[0].shape))  # verify dimensions\n",
    "test_eq(X_win.shape[-1], w)              # verify width\n",
    "if dims == 3: test_eq(X_win.shape[-2], 1)\n",
    "\n",
    "# Verify y output\n",
    "\n",
    "# per-row labels\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(isinstance(y_win, L), True)\n",
    "test_eq(X_win.shape[0], len(y_win))\n",
    "\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, dims=3)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(isinstance(y_win, L), True)\n",
    "test_eq(X_win.shape[0], len(y_win))\n",
    "\n",
    "# per-annotation labels\n",
    "\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, per_ann_label=True)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, \n",
    "                                                     per_ann_label=True, limit=5)\n",
    "test_eq(isinstance(y_win, L), True)\n",
    "test_eq(X_win.shape[0], len(y_win))\n",
    "\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, per_ann_label=True, dims=3)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, \n",
    "                                                     per_ann_label=True, limit=5)\n",
    "test_eq(isinstance(y_win, L), True)\n",
    "test_eq(X_win.shape[0], len(y_win))\n",
    "\n",
    "\n",
    "# array/vector labels\n",
    "\n",
    "X, y, events = get_synthetic_sin_data(length=1000, n_sig=3, label_is_array=True)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(type(X_win), type(y_win))\n",
    "test_eq(X_win.shape[0], y_win.shape[0])\n",
    "test_eq(X_win.shape[-1], y_win.shape[-1])\n",
    "\n",
    "X, y, events = get_synthetic_sin_data(length=1000, n_sig=3, label_is_array=True, dims=3)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(type(X_win), type(y_win))\n",
    "test_eq(X_win.shape[0], y_win.shape[0])\n",
    "test_eq(X_win.shape[-1], y_win.shape[-1])\n",
    "\n",
    "X, y, events = get_synthetic_sin_data(length=(1000, 1100), n_sig=3, label_is_array=True)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(type(X_win), type(y_win))\n",
    "test_eq(X_win.shape[0], y_win.shape[0])\n",
    "test_eq(X_win.shape[-1], y_win.shape[-1])\n",
    "\n",
    "X, y, events = get_synthetic_sin_data(length=(1000, 1100), n_sig=3, label_is_array=True, dims=3)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(type(X_win), type(y_win))\n",
    "test_eq(X_win.shape[0], y_win.shape[0])\n",
    "test_eq(X_win.shape[-1], y_win.shape[-1])\n",
    "\n",
    "# Multi-label vs single label tests\n",
    "\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(isinstance(y_win[0], (tuple, list, L)), False)\n",
    "\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, has_multi_label=True)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5)\n",
    "test_eq(isinstance(y_win[0], (tuple, list, L)), True)\n",
    "test_eq(isinstance(y_win[0][0], (tuple, list, L)), False)\n",
    "\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, per_ann_label=True)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, \n",
    "                                                     per_ann_label=True, limit=5)\n",
    "test_eq(isinstance(y_win[0], (tuple, list, L)), False)\n",
    "\n",
    "X, y, anns = get_synthetic_sin_data(length=1000, n_sig=3, has_multi_label=True, \n",
    "                                    per_ann_label=True)\n",
    "X_win, y_win = preprocess_extract_annotation_windows(X, anns, y=y, width=300, limit=5,\n",
    "                                                     per_ann_label=True)\n",
    "test_eq(isinstance(y_win[0], (tuple, list, L)), True)\n",
    "test_eq(isinstance(y_win[0][0], (tuple, list, L)), False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Annotated Data Helper Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "def get_reference_data(n_rows=8, per_ann_label=False, label_is_array=False, n_classes=1000000):\n",
    "    '''Generates deterministic test data'''\n",
    "    w = n_rows+2\n",
    "    X = np.zeros((n_rows, 1, w))\n",
    "    for i in range(n_rows): X[i, 0, i+1] = i+1\n",
    "        \n",
    "    if per_ann_label:\n",
    "        y = L(L(f'{(i+1)%n_classes}') for i in range(n_rows))\n",
    "    elif label_is_array:\n",
    "        y = np.zeros((n_rows, w))\n",
    "        for i in range(n_rows): y[i, i+1] = i+1\n",
    "    else:\n",
    "        #y = L(f'{i+1}' for i in range(n_rows))\n",
    "        y = L((i+1)%n_classes for i in range(n_rows))\n",
    "        \n",
    "    anns = L(L(i+1) for i in range(n_rows))\n",
    "    splits = L(L(range(n_rows//2)), L(range(n_rows//2, n_rows)))\n",
    "    return X, y, anns, splits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "def pre_categorize(*args, categorizer=None, splits=None, default=None):\n",
    "    \"\"\"Applies categorizer to list or nest list of labels.  Used\n",
    "    to preprocess per-annotation labels\"\"\"\n",
    "    is_nested = isinstance(args[0][0], (tuple, list, L))\n",
    "    if categorizer is None: categorizer=Categorize\n",
    "    if inspect.isclass(categorizer):\n",
    "        y_train = args[0][splits[0]] if splits else args[0]\n",
    "        vocab = {y_per for y_row in y_train for y_per in y_row} \\\n",
    "                if is_nested else {y_row for y_row in y_train}\n",
    "        if default: vocab.add(default)\n",
    "        c = categorizer()\n",
    "        c.setups(vocab)\n",
    "    else:\n",
    "        c = categorizer\n",
    "    if is_nested:\n",
    "        results = [[[c(y_per) for y_per in y_row] for y_row in y_set] for y_set in args]\n",
    "    else:\n",
    "        results = [[c(y_row) for y_row in y_set] for y_set in args]\n",
    "    results = results[0] if len(args) == 1 else results\n",
    "    return results, c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2],\n",
       " [TensorCategory(1), TensorCategory(2), TensorCategory(0), TensorCategory(1)],\n",
       " [TensorCategory(2), TensorCategory(0), TensorCategory(1), TensorCategory(2)])"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# per-row labels\n",
    "X, y, anns, splits = get_reference_data(n_classes=3)\n",
    "(yc_train, yc_valid), c = pre_categorize(y[splits[0]], y[splits[1]])\n",
    "c.vocab, yc_train, yc_valid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['0', '1', '2'],\n",
       " [[TensorCategory(1)],\n",
       "  [TensorCategory(2)],\n",
       "  [TensorCategory(0)],\n",
       "  [TensorCategory(1)]],\n",
       " [[TensorCategory(2)],\n",
       "  [TensorCategory(0)],\n",
       "  [TensorCategory(1)],\n",
       "  [TensorCategory(2)]])"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# per-ann labels\n",
    "X, y, anns, splits = get_reference_data(n_classes=3, per_ann_label=True)\n",
    "(yc_train, yc_valid), c = pre_categorize(y[splits[0]], y[splits[1]])\n",
    "c.vocab, yc_train, yc_valid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "n_classes=3\n",
    "# Unit test per-row labels\n",
    "X, y, anns, splits = get_reference_data(n_classes=n_classes)\n",
    "(yc_train, yc_valid), c = pre_categorize(y[splits[0]], y[splits[1]])\n",
    "\n",
    "test_eq(len(c.vocab), n_classes)\n",
    "test_eq(len(yc_train), len(splits[0]))\n",
    "test_eq(len(yc_valid), len(splits[1]))\n",
    "test_eq(set(c.vocab), set(y))\n",
    "\n",
    "# Unit test per-ann labels\n",
    "X, y, anns, splits = get_reference_data(n_classes=n_classes, per_ann_label=True)\n",
    "(yc_train, yc_valid), c = pre_categorize(y[splits[0]], y[splits[1]])\n",
    "test_eq(len(c.vocab), n_classes)\n",
    "test_eq(len(yc_train), len(splits[0]))\n",
    "test_eq(len(yc_valid), len(splits[1]))\n",
    "test_eq(set(c.vocab), set(_y for y_row in y for _y in y_row))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Annotated Data Transforms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "class TSPerAnnotationGenericClassifier(DisplayedTransform):\n",
    "    \"\"\"Common base class supporting slassification of list of Labels\"\"\"\n",
    "    def __init__(self, classifier, default=None, **kwargs):\n",
    "        assert classifier is not None\n",
    "        self.classifier = classifier(**kwargs) if inspect.isclass(classifier) else classifier\n",
    "        self.default=default\n",
    "             \n",
    "    @property\n",
    "    def vocab(self):\n",
    "        \"\"\"Returns vocabulary with map\"\"\"\n",
    "        return self.classifier.vocab\n",
    "    \n",
    "    @property\n",
    "    def internal_classifier(self):\n",
    "        \"\"\"Returns underlying classifier (TSClassification or TSMultiLabelClassification)\"\"\"\n",
    "        return self.classifier\n",
    "    \n",
    "    def setups(self, dsets):\n",
    "        if self.classifier.vocab is None and dsets is not None: \n",
    "            label_values = [label for row in dsets for label in row]\n",
    "            if self.default: label_values.append(label_values)\n",
    "            self.classifier.setups(label_values)\n",
    "            \n",
    "    def encodes(self, o):\n",
    "        return L(self.classifier.encodes(oo) for oo in o)\n",
    "    \n",
    "    def decodes(self, o):\n",
    "        return L(self.classifier.decodes(oo) for oo in o)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "<h4 id=\"TSPerAnnotationGenericClassifier.vocab\" class=\"doc_header\"><code>TSPerAnnotationGenericClassifier.vocab</code><a href=\"\" class=\"source_link\" style=\"float:right\">[source]</a></h4>\n",
       "\n",
       "Returns vocabulary with map"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_doc(TSPerAnnotationGenericClassifier.vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "<h4 id=\"TSPerAnnotationGenericClassifier.internal_classifier\" class=\"doc_header\"><code>TSPerAnnotationGenericClassifier.internal_classifier</code><a href=\"\" class=\"source_link\" style=\"float:right\">[source]</a></h4>\n",
       "\n",
       "Returns underlying classifier (TSClassification or TSMultiLabelClassification)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_doc(TSPerAnnotationGenericClassifier.internal_classifier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export \n",
    "class TSPerAnnClassification(TSPerAnnotationGenericClassifier):\n",
    "    \"\"\"Classifies list of per-annotation labels, returns L(TensorCategory)\"\"\"\n",
    "    @delegates(TSPerAnnotationGenericClassifier.__init__)\n",
    "    @delegates(TSClassification.__init__)\n",
    "    def __init__(self, **kwargs):\n",
    "        \"\"\"Classifies list of per-annotation labels, returns L(TensorCategory)\"\"\"\n",
    "        super().__init__(TSClassification, **kwargs)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "show_doc(TSPerAnnClassification.__init__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['n', 'p'],\n",
       " Categorize -- {'vocab': None, 'sort': True, 'add_na': False}:\n",
       " encodes: (Tabular,object) -> encodes\n",
       " (object,object) -> encodes\n",
       " decodes: (Tabular,object) -> decodes\n",
       " (object,object) -> decodes)"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y, anns, splits = get_synthetic_sin_data(length=100, n_sig=100, dims=3, \n",
    "                                            split_pct=0.2,per_ann_label=True)\n",
    "\n",
    "tspac = TSPerAnnClassification()\n",
    "tspac.setup(y[splits[0]])\n",
    "tspac.vocab, tspac.internal_classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((#1) ['p'], (#1) [TensorCategory(1)], (#1) ['p'])"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_y = y[splits[0]][0]\n",
    "_y, tspac.encodes(_y), tspac.decodes(tspac.encodes(_y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "<h4 id=\"TSPerAnnotationGenericClassifier.vocab\" class=\"doc_header\"><code>TSPerAnnotationGenericClassifier.vocab</code><a href=\"\" class=\"source_link\" style=\"float:right\">[source]</a></h4>\n",
       "\n",
       "Returns vocabulary with map"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_doc(TSPerAnnClassification.vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "# Unit test\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=100, n_sig=100, dims=3, \n",
    "                                            split_pct=0.2,per_ann_label=True)\n",
    "tspac = TSPerAnnClassification()\n",
    "tspac.setup(y[splits[0]])\n",
    "test_eq(tspac.vocab, ['n', 'p'])\n",
    "test_eq(isinstance(tspac.internal_classifier, type(TSClassification())), True)\n",
    "for split_set in splits:\n",
    "    for s in split_set:\n",
    "        test_eq(y[s], tspac.decodes(tspac.encodes(y[s])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export  \n",
    "class TSPerAnnMultiLabelClassification(TSPerAnnotationGenericClassifier):\n",
    "    \"\"\"Classifies list of per-annotation multi-labels, \n",
    "    returns (L(tensor) contining one-hot encoded values\"\"\"\n",
    "    @delegates(ItemTransform.__init__)\n",
    "    @delegates(TSMultiLabelClassification.__init__)\n",
    "    def __init__(self, **kwargs):\n",
    "        \"\"\"Classifies list of per-annotation multi-labels, \n",
    "        returns (L(tensor) contining one-hot encoded values\"\"\"\n",
    "        super().__init__(TSMultiLabelClassification, **kwargs)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "show_doc(TSPerAnnMultiLabelClassification.__init__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# New\n",
    "\n",
    "\n",
    "\n",
    "Y Value format Format:\n",
    " - List with per-row values\n",
    " - Tuple per row (pos_spec, label_spec)\n",
    " - pos_spec: (i_start, i_end, [chan], [y_chan])  # using default parser\n",
    "   - if channel specified, it can be int, slice or \"random\".  if missing, defaults to all\n",
    " - label_spec: \n",
    "   - common label\n",
    "   - vector\n",
    "   - per-annotation label - label(s) per annotation\n",
    "\n",
    "#### Limitations\n",
    "- Must have at least 1 valid Label\n",
    "\n",
    "#### Approach\n",
    "- Preprocess Labels\n",
    "- offset to bounds\n",
    "- Zip annotations and labels after filtering endpoints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def y_getter_per_row_label(i, entry, **ignore):\n",
    "    return entry\n",
    "\n",
    "def y_getter_per_ann_label(i, entry, default=None, **ignore):\n",
    "    assert i is not None or default is not None\n",
    "    return entry[i] if i is not None else default\n",
    "\n",
    "def y_getter_vector_label(i, entry, offset=None, width=None, y_chan=None):   \n",
    "    assert offset is not None and width is not None\n",
    "    if len(entry.shape) > 1:\n",
    "        if y_chan is None:\n",
    "            y_chan = slice(entry.shape[0])\n",
    "        return entry[y_chan, i+offset:i+offset+width]  \n",
    "    else:\n",
    "        return entry[i+offset:i+offset+width] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]]), 1, (#1) [1], 1)"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y, anns, splits = get_reference_data(n_classes=3)\n",
    "X[0], y[0], anns[0], y_getter_per_row_label(anns[0][0], y[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]]), (#1) ['1'], (#1) [1], '1')"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y, anns, splits = get_reference_data(n_classes=3, per_ann_label=True)\n",
    "X[0], y[0], anns[0],  y_getter_per_ann_label(0, y[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2],\n",
       "       [10, 11, 12],\n",
       "       [20, 21, 22],\n",
       "       [30, 31, 32],\n",
       "       [40, 41, 42],\n",
       "       [50, 51, 52],\n",
       "       [60, 61, 62],\n",
       "       [70, 71, 72],\n",
       "       [80, 81, 82],\n",
       "       [90, 91, 92]])"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_vec = np.arange(100).reshape(10, 10)\n",
    "y_getter_vector_label(0, y_vec, offset=0, width=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10, 11, 12])"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_getter_vector_label(0, y_vec, offset=0, width=3, y_chan=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10, 11, 12])"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_getter_vector_label(0, y_vec[1], offset=0, width=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-39-dbef9b777f45>, line 6)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-39-dbef9b777f45>\"\u001b[0;36m, line \u001b[0;32m6\u001b[0m\n\u001b[0;31m    bounds =\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def _get_ann_bounds(all_ann, lengths, width=100, offset=None):\n",
    "    lengths = [lengths]*len(all_ann) if isinstance(lengths, int) else lengths   # lengths for each row\n",
    "    offset = offset if offset else -width//2\n",
    "    offsetR = width + offset\n",
    "    \n",
    "    bounds = \n",
    "    \n",
    "    for i, row_anns in enumerate(all_ann):\n",
    "        row_anns =  [(idx, e) for idx, e in enumerate(row_anns) \n",
    "                     if e+offset >=0 and e+offsetR <  lengths[i]]  # trim overlap\n",
    "        if len(row_anns) > 0:\n",
    "            if limit and len(row_anns) > limit:\n",
    "                random.shuffle(row_anns)\n",
    "                row_anns = row_anns[:limit]\n",
    "            for i_a, pos in row_anns:\n",
    "                yield i, pos+offset, pos+offsetR, i_a\n",
    "        elif include_empty:\n",
    "            pos = random.randint(lengths[i]-width)\n",
    "            yield i, pos, pos+width, None\n",
    "        else:\n",
    "            continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "class TSAnnotationWindow(ItemTransform):\n",
    "    \"\"\"Extract subsequence corresponding to annotation and selects appropriate label\"\"\"\n",
    "    @delegates(ItemTransform.__init__)\n",
    "    def __init__(self, width=100, offset=None, x_out_type=None, y_out_type=None, \n",
    "                 default_label=None, verbose=False, classifier=None, **kwargs):\n",
    "        \"\"\"Extract subsequence corresponding to annotation and selects appropriate label\"\"\"\n",
    "        self.width, self.offset, self.verbose = width, offset, verbose\n",
    "        self.x_out_type, self.y_out_type, self.default_label = x_out_type, y_out_type, default_label\n",
    "        self.y_mode, self.classifier = None, classifier\n",
    "        super().__init__(**kwargs)\n",
    "        \n",
    "\n",
    "    def _setup(self, o):\n",
    "        o_x, o_y = o            \n",
    "        self.is_batch =  len(o_x.data.shape) == 3 and o_x.data.shape[0] > 1\n",
    "        if self.is_batch:\n",
    "            o_y = o_y[0]  # loot at first row of y values when assessing type\n",
    "            \n",
    "        if isinstance(o_y, (TensorCategory, TensorMultiCategory)):\n",
    "            self.y_mode = 'common'\n",
    "        elif isinstance(o_y, (TSTensor, Tensor)):\n",
    "            self.y_mode = 'tensor'\n",
    "            if not self.y_out_type and isinstance(o_y, TSTensor):\n",
    "                self.y_out_type = TSTensor\n",
    "        elif isinstance(o_y, np.ndarray):\n",
    "            self.y_mode = 'numpy'\n",
    "            if not self.y_out_type:\n",
    "                self.y_out_type = TSTensor\n",
    "        elif isinstance(o_y, (list, tuple, L)):\n",
    "            self.y_mode = 'per_ann'\n",
    "        else:\n",
    "            raise Exception(f'Unknown y type: {type(o_y)}')   \n",
    "        if self.x_out_type is None:\n",
    "            self.x_out_type = TSTensor \n",
    "        \n",
    "        \n",
    "    def encodes(self, o):  \n",
    "        o_x, o_y = o  \n",
    "        if self.y_mode is None:\n",
    "            self._setup(o)\n",
    "        #o_y = L(*o_y) if isinstance(o_y, list) else o_y\n",
    "        \n",
    "        windows = [z for z in _sliding_annotations(o_x.ann, o_x.data.size()[-1], width=self.width, \n",
    "                                              offset=self.offset, include_empty=True, limit=1)]\n",
    "        output_x = torch.stack([o_x[i_row, :, idxL:idxR] for i_row, idxL, idxR, idx_a in windows] )\n",
    "        output_x = self.x_out_type(output_x)\n",
    "            \n",
    "        if self.y_mode == 'common':\n",
    "            output_y = o_y\n",
    "        elif self.y_mode == 'tensor':\n",
    "            output_y = torch.stack([o_y[i_row, ..., idxL:idxR] \n",
    "                                    for i_row, idxL, idxR, idx_a in windows] )\n",
    "            if self.y_out_type: \n",
    "                output_y = self.y_out_type(output_y)\n",
    "            elif isinstance(o_y, TSTensor):\n",
    "                output_y = o_y.new(output_y)\n",
    "        elif self.y_mode == 'numpy':\n",
    "            output_y = np.vstack([o_y[i_row][..., idxL:idxR] \n",
    "                                    for i_row, idxL, idxR, idx_a in windows] )\n",
    "            if self.y_out_type: \n",
    "                output_y = self.y_out_type(output_y)\n",
    "            elif isinstance(o_y, TSTensor):\n",
    "                output_y = o_y.new(output_y)     \n",
    "        elif self.y_mode == 'per_ann':\n",
    "            default_label = self.classifier.encode(self.default_label) \\\n",
    "                            if self.classifier and self.default_label else None\n",
    "            output_y =  [o_y[i_row][idx_a] if idx_a else default_label if default_label \\\n",
    "                         else o_y[i_row][idx_a]\n",
    "                         for i_row, idxL, idxR, idx_a in windows]\n",
    "        else:\n",
    "            raise exception(f'unknown y_mode: {self.y_mode}')\n",
    "            \n",
    "        if self.y_mode in ('per_ann', 'common'):\n",
    "            if self.y_out_type: \n",
    "                output_y = self.y_out_type(output_y)\n",
    "            else:\n",
    "                output_y = output_y[0].new(output_y)\n",
    "            \n",
    "        return output_x, output_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_doc(TSAnnotationWindow.__init__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "````\n",
    "Inputs:\n",
    "    width:         Width of extracted subsequence, \n",
    "    offset:        Start of subsequence relative to annotated position, \n",
    "                   default -width//2 \n",
    "    default_label: When used with per-annotation labels, this is the label \n",
    "                   returned with randomly selected subsequence when no valid\n",
    "                   annotated position\n",
    "    classifier:    Used to encode default-label, if needed\n",
    "    x_out_type:    Overrides X output type, if X is non-tensor, defaults\n",
    "                   to TSTensor\n",
    "    y_out_type:    Overrides y output type, default to same as input type for \n",
    "                   per-row and per-annotation labels, uses TSTensor  \n",
    "                   for array/vector labels if not already in tensor format\n",
    "````"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example:  TSAnnotationWindow with categorized per-row labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "width=120\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=1000, dims=3, \n",
    "                                            split_pct=0.2)\n",
    "dls = get_ats_dls(X, y=y, anns=anns, splits=splits, tfms=[None, Categorize])\n",
    "\n",
    "xb,yb = next(iter(dls.valid))\n",
    "f, ax = plt.subplots(figsize=(8, 1))\n",
    "_ = xb.show(ax=ax)\n",
    "\n",
    "tsaw = TSAnnotationWindow(width=width)\n",
    "xo, yo = tsaw((xb, yb), split_idx=0)\n",
    "fig, ax = plt.subplots(figsize=(4, 2))\n",
    "_ = xo.show(ax=ax)\n",
    "xo, yo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "test_eq(xb.size()[:-1], xo.size()[:-1])\n",
    "test_eq(xo.size()[-1], tsaw.width)\n",
    "test_eq(yo, yb[0].new(yb))   # should be same labels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: TSAnnotationWindow with categorized per-annotation labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "width=120\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=1000, dims=3, \n",
    "                                            split_pct=0.2,per_ann_label=True)\n",
    "y_cat, c = pre_categorize(y, splits=splits)\n",
    "dls = get_ats_dls(X, y=y_cat, anns=anns, splits=splits, tfms=[None, None])\n",
    "\n",
    "xb,yb = next(iter(dls.valid))\n",
    "f, ax = plt.subplots(figsize=(8, 1))\n",
    "_ = xb.show(ax=ax)\n",
    "\n",
    "tsaw = TSAnnotationWindow(width=width)\n",
    "xo, yo = tsaw((xb, yb), split_idx=0)\n",
    "for i in range(0,10, 3):\n",
    "    fig, ax = plt.subplots(figsize=(2, 1.25))\n",
    "    plt.title(c.decodes(yo[i]))\n",
    "    _ = xo[i].show(ax=ax)\n",
    "xo[0], yo[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "test_eq(xb.size()[:-1], xo.size()[:-1])\n",
    "test_eq(xo.size()[-1], tsaw.width)\n",
    "test_eq(len(yo), len(yb))   # should be same labels\n",
    "test_eq(len({int(_z) for _z in yo}), 2)   # only 2 classes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: TSAnnotationWindow vector labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "width=120\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=1000, dims=3, \n",
    "                                            split_pct=0.2, label_is_array=True)\n",
    "dls = get_ats_dls(X, y=y, anns=anns, splits=splits, tfms=[None, ToTSTensor])\n",
    "xb,yb = next(iter(dls.valid))\n",
    "\n",
    "f, ax = plt.subplots(figsize=(8, 2))\n",
    "plt.title('vector label')\n",
    "_ = yb[0].show(ax=ax)\n",
    "\n",
    "tsaw = TSAnnotationWindow(width=width)\n",
    "xo, yo = tsaw((xb, yb), split_idx=0)\n",
    "fig, ax = plt.subplots(figsize=(4, 2))\n",
    "plt.title('subsequence vector label')\n",
    "_ = yo[0].show(ax=ax)\n",
    "xo, yo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hide\n",
    "test_eq(xb.size()[:-1], xo.size()[:-1])\n",
    "test_eq(xo.size()[-1], tsaw.width)\n",
    "test_eq(yo.shape[0], len(yb))   # should be same labels\n",
    "test_eq(yo.shape[-1], tsaw.width)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## End-to-End Support"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#exporti\n",
    "def _tfm_to_list(entry):\n",
    "    if isinstance(entry, (tuple, list, L)):\n",
    "        return list(*entry)\n",
    "    elif entry:\n",
    "        return [entry]\n",
    "    else:\n",
    "        return []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#exporti\n",
    "def _merge_transforms(prefix_tfms, existing_tfms):\n",
    "    prefix_tfms = [_tfm_to_list(prefix_tfms[0]) , _tfm_to_list(prefix_tfms[1])] \\\n",
    "                   if prefix_tfms else [[], []]\n",
    "    existing_tfms = [tfm_to_list(existing_tfms[0]) , tfm_to_list(existing_tfms[1])] \\\n",
    "                     if existing_tfms else [[], []]\n",
    "    return [prefix_tfms[0]+existing_tfms[0], prefix_tfms[1]+existing_tfms[1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#export\n",
    "@delegates(get_ats_dls)\n",
    "def get_ats_dls_with_transforms(X, y=None, per_ann_label=False,\n",
    "                                window_width=100, window_offset=None,\n",
    "                                default_label=None,tfms=None, batch_tfms=None,\n",
    "                                **kwargs):\n",
    "    \"\"\"Returns TSAnnotatedDataLoaders with pre-configured transforms based on\n",
    "    label types.  Also includes classifier to decode/encode individual label\"\"\"\n",
    "    is_vector = isinstance(y[0], (np.ndarray, Tensor))\n",
    "    \n",
    "    if is_vector:\n",
    "        tfm_y = ToTSTensor\n",
    "        classifier = None\n",
    "    elif per_ann_label: # per_ann\n",
    "        if isinstance(y[0][0], (tuple, list, L)): # multi-category\n",
    "            tfm_y = TSPerAnnMultiLabelClassification(default=default_label)\n",
    "        else:\n",
    "            tfm_y = TSPerAnnClassification(default=default_label)\n",
    "        classifier = tfm_y.internal_classifier\n",
    "    else:   # per-row\n",
    "        if isinstance(y[0], (tuple, list, L)): # multi-category\n",
    "            tfm_y = TSMultiLabelClassification()\n",
    "        else:\n",
    "            tfm_y = TSClassification()\n",
    "        classifier = tfm_y\n",
    "        \n",
    "    if per_ann_label and default_label:\n",
    "        tsaw = TSAnnotationWindow(width=window_width, offset=window_offset,\n",
    "                                  default_label=default_label, \n",
    "                                  classifier=tfm_y.internal_classifier)\n",
    "    else:\n",
    "        tsaw = TSAnnotationWindow(width=window_width, offset=window_offset)\n",
    "    \n",
    "    tfms = _merge_transforms([None, tfm_y], tfms)\n",
    "    batch_tfms = _tfm_to_list(tsaw) + _tfm_to_list(batch_tfms)\n",
    "    dls = get_ats_dls(X, y=y, tfms=tfms, batch_tfms=batch_tfms, **kwargs)\n",
    "    return dls, classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_doc(get_ats_dls_with_transforms)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: Per-row labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "width=120\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=1000, dims=3, \n",
    "                                            split_pct=0.2)\n",
    "dls, c = get_ats_dls_with_transforms(X, y=y, anns=anns, splits=splits, bs=2,\n",
    "                                  window_width=width, window_offset=-width//2)\n",
    "\n",
    "xb,yb = next(iter(dls.train))\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Train: {c.decode(yb[0])}')\n",
    "_ = xb.show(ax=ax)\n",
    "\n",
    "xb,yb = next(iter(dls.valid))\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Valid: {c.decode(yb[0])}')\n",
    "_ = xb.show(ax=ax)\n",
    "\n",
    "xb,yb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example:  Per-annotation labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "width=120\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=1000, dims=3, \n",
    "                                            split_pct=0.2, per_ann_label=True)\n",
    "dls, c = get_ats_dls_with_transforms(X, y=y, anns=anns, splits=splits, bs=2,\n",
    "                                  per_ann_label=True,\n",
    "                                  window_width=width, window_offset=-width//2)\n",
    "\n",
    "xb,yb = next(iter(dls.train))\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Train: {c.decode(yb[0])}')\n",
    "_ = xb.show(ax=ax)\n",
    "\n",
    "xb,yb = next(iter(dls.valid))\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Valid: {c.decode(yb[0])}')\n",
    "_ = xb.show(ax=ax)\n",
    "\n",
    "xb,yb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Example: Array/Vector labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "width=120\n",
    "X, y, anns, splits = get_synthetic_sin_data(length=1000, n_sig=1000, dims=3, \n",
    "                                            split_pct=0.2, label_is_array=True)\n",
    "dls, c = get_ats_dls_with_transforms(X, y=y, anns=anns, splits=splits, bs=2,\n",
    "                                  window_width=width, window_offset=-width//2)\n",
    "\n",
    "xb,yb = next(iter(dls.train))\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Train: X')\n",
    "_ = xb[0].show(ax=ax)\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Train: Y')\n",
    "_ = yb[0].show(ax=ax)\n",
    "\n",
    "xb,yb = next(iter(dls.valid))\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Valid: X')\n",
    "_ = xb[0].show(ax=ax)\n",
    "f, ax = plt.subplots(figsize=(3, 1))\n",
    "plt.title(f'Valid: Y')\n",
    "_ = yb[0].show(ax=ax)\n",
    "\n",
    "xb,yb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:tsai2]",
   "language": "python",
   "name": "conda-env-tsai2-py"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
